/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SuppliersImport } from './routes/suppliers'
import { Route as SettingImport } from './routes/setting'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as InventoryImport } from './routes/inventory'
import { Route as CategoryImport } from './routes/category'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SuppliersRoute = SuppliersImport.update({
  id: '/suppliers',
  path: '/suppliers',
  getParentRoute: () => rootRoute,
} as any)

const SettingRoute = SettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const InventoryRoute = InventoryImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => rootRoute,
} as any)

const CategoryRoute = CategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/category': {
      id: '/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryImport
      parentRoute: typeof rootRoute
    }
    '/inventory': {
      id: '/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof InventoryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingImport
      parentRoute: typeof rootRoute
    }
    '/suppliers': {
      id: '/suppliers'
      path: '/suppliers'
      fullPath: '/suppliers'
      preLoaderRoute: typeof SuppliersImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/category': typeof CategoryRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setting': typeof SettingRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/category': typeof CategoryRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setting': typeof SettingRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/category': typeof CategoryRoute
  '/inventory': typeof InventoryRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/setting': typeof SettingRoute
  '/suppliers': typeof SuppliersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/category'
    | '/inventory'
    | '/login'
    | '/register'
    | '/setting'
    | '/suppliers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/category'
    | '/inventory'
    | '/login'
    | '/register'
    | '/setting'
    | '/suppliers'
  id:
    | '__root__'
    | '/'
    | '/category'
    | '/inventory'
    | '/login'
    | '/register'
    | '/setting'
    | '/suppliers'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoryRoute: typeof CategoryRoute
  InventoryRoute: typeof InventoryRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  SettingRoute: typeof SettingRoute
  SuppliersRoute: typeof SuppliersRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoryRoute: CategoryRoute,
  InventoryRoute: InventoryRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  SettingRoute: SettingRoute,
  SuppliersRoute: SuppliersRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/category",
        "/inventory",
        "/login",
        "/register",
        "/setting",
        "/suppliers"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/category": {
      "filePath": "category.tsx"
    },
    "/inventory": {
      "filePath": "inventory.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/setting": {
      "filePath": "setting.tsx"
    },
    "/suppliers": {
      "filePath": "suppliers.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
